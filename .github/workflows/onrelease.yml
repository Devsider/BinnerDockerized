name: Generate Dockerfile

on:
  workflow_dispatch:
  push:
    branches:
      - main

jobs:
  generate_dockerfile:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Install jq
        run: sudo apt-get install jq

      - name: Get releases
        id: releases
        run: |
          RELEASES=$(curl --silent "https://api.github.com/repos/replaysMike/Binner/releases")
          if [[ "$RELEASES" == "null" ]]; then
            echo "::warning::No releases found for the repository."
            exit 0
          fi
          ASSETS=$(echo "$RELEASES" | jq -r '.[].assets[].browser_download_url')
          echo "::set-output name=assets::${ASSETS}"

      - name: Create Dockerfile
        run: |
          ASSETS=${{ steps.releases.outputs.assets }}
          if [[ -z "$ASSETS" ]]; then
            echo "::warning::No assets found for the releases."
            exit 0
          fi
          for ASSET in $ASSETS; do
            PLATFORM=$(echo $ASSET | awk -F'/' '{ print $(NF-1) }')
            FILENAME=$(basename $ASSET)
            DOCKERFILE="Dockerfile.${PLATFORM}"
            echo "FROM ubuntu:22.04" > $DOCKERFILE
            echo "CMD [\"/bin/bash\"]" >> $DOCKERFILE
            echo "" >> $DOCKERFILE
            echo "WORKDIR /app" >> $DOCKERFILE
            echo "RUN mkdir -p /app" >> $DOCKERFILE
            echo "RUN cd /app" >> $DOCKERFILE
            echo "" >> $DOCKERFILE
            echo "COPY . ." >> $DOCKERFILE
            echo "RUN apt-get update \\" >> $DOCKERFILE
            echo "    && apt-get install -y curl \\" >> $DOCKERFILE
            echo "    && apt-get install -y libicu-dev \\" >> $DOCKERFILE
            echo "    && rm -rf /var/lib/apt/lists/*" >> $DOCKERFILE
            echo "RUN curl -L -o app.tar.gz $ASSET" >> $DOCKERFILE
            echo "RUN tar zxfp ./app.tar.gz" >> $DOCKERFILE
            echo "" >> $DOCKERFILE
            echo "RUN chmod +x ./install-as-service.sh" >> $DOCKERFILE
            echo "RUN chmod +x Binner.Web" >> $DOCKERFILE
            echo "" >> $DOCKERFILE
            echo "EXPOSE 8090" >> $DOCKERFILE
            echo "CMD pwd && ./Binner.Web" >> $DOCKERFILE
          done

      - name: Configure Git
        run: |
          git config --global user.name "Devsider"
          git config --global user.email "deve@example.com"

      - name: Commit and push Dockerfiles
        run: |
          git add Dockerfile.*
          git commit -m "Add Dockerfiles for releases"
          git push
